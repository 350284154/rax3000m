#
# https://github.com/padavanonly/immortalwrt-mt798x-6.6.git
#
# File: .github/workflows/openwrt-builder.yml
# Description: Optimized OpenWrt Build Workflow (Anti-Crash Edition)
#

name: OpenWrt Builder (Stable)

on:
  repository_dispatch:
  workflow_dispatch:

env:
  # --- 编译配置参数 ---
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-6.6.git
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai
  
  # --- 上传/发布控制参数 ---
  UPLOAD_BIN_DIR: false     # 是否上传整个 bin 目录
  UPLOAD_FIRMWARE: true     # 是否上传目标固件文件 (targets/*/* 目录)
  UPLOAD_RELEASE: false     # 关闭自动发布 Release
  
  # ⭐ 新增环境变量：设置安全的编译线程数
  SAFE_THREADS: 2           # 限制在 2 线程，防止 Runner 内存/CPU 耗尽

jobs:
  build:
    runs-on: ubuntu-22.04
    # 增加超时时间，给予 Runner 更多时间重启或恢复
    timeout-minutes: 420 # 7小时，防止编译大包超时

    steps:
    - name: ⬇️ Checkout Repository
      uses: actions/checkout@v4
      
    # ----------------------------------------------------
    # ⭐ 优化点 1：最大化释放 Runner 上的磁盘/内存空间
    # ----------------------------------------------------
    - name: 🛠️ Initialization and Space Cleanup
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Starting environment cleanup..."
        # 彻底清理和释放 Runner 资源
        sudo swapoff -a
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force || true
        
        # 优化 apt
        sudo -E apt-get -qq update
        # 精简核心依赖，使用更稳定的 python3-setuptools
        sudo -E apt-get -qq install build-essential ccache libncurses5-dev libncursesw5-dev \
            gawk git gettext libssl-dev xsltproc rsync wget unzip python3 python3-setuptools \
            python3-distutils file zlib1g-dev device-tree-compiler
        
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        
        # 设置时区和工作目录
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 🔍 Check Initial Disk Space
      run: df -hT

    - name: ⚙️ Clone source code
      working-directory: /workdir
      run: |
        echo "Cloning $REPO_URL on branch $REPO_BRANCH..."
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: ⚙️ Load custom feeds & DIY Part 1
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: ⚙️ Update & Install feeds
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    # ----------------------------------------------------
    # ⭐ 优化点 2：在 DIY-P2 阶段强制禁用高负载优化 (LTO/PGO)
    # ----------------------------------------------------
    - name: ⚙️ Load custom configuration & DIY Part 2 (Anti-Crash Config)
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
        # ⬇️ 强制禁用 LTO/PGO 优化，以避免 Runner 内存耗尽导致通信中断
        echo "Disabling LTO/PGO to prevent Runner crash..."
        sed -i '/CONFIG_PACKAGE_USE_LTO/d' .config
        sed -i '/CONFIG_USE_LTO/d' .config
        sed -i '/CONFIG_USE_PGO/d' .config
        
        make defconfig

    - name: 📦 Download packages
      id: package
      run: |
        cd openwrt
        # 保持 -j8 下载以节省时间
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: 🚀 Compile the firmware (Using Safe Threads)
      id: compile
      timeout-minutes: 360 # 6 小时编译时间
      run: |
        cd openwrt
        # ⭐ 关键修改：使用 SAFE_THREADS (2 线程) 编译，防止内存耗尽
        echo -e "Starting stable ${SAFE_THREADS} thread compile..."
        make -j${SAFE_THREADS} || make -j1 V=s
        
        # 检查编译是否真的成功
        if [ $? -eq 0 ] && [ -d "bin/targets" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
        else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "::error::Compilation failed or target binaries not found."
            exit 1
        fi
        
        # 提取设备名和生成文件日期
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 🔍 Check Final Disk Space
      if: always()
      run: df -hT

    - name: 📂 Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
      run: |
        FIRMWARE_DIR="openwrt/bin/targets/*/*"
        # 确保目录存在且删除 packages
        if [ -d "$FIRMWARE_DIR" ]; then
          rm -rf $FIRMWARE_DIR/packages || true
          echo "FIRMWARE=$FIRMWARE_DIR" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "::warning::Target firmware directory not found."
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: 📤 Upload firmware artifact
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        # 使用通配符确保上传所有固件文件
        path: openwrt/bin/targets/*/*/* - name: 🧹 Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 2
        delete_run_by_conclusion: success
